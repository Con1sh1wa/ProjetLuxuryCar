const express = require('express');
const { Op } = require('sequelize'); // üîÅ Ajout pour les op√©rateurs Sequelize
const Reservation = require('../models/Reservation');
const Car = require('../models/Car');

const router = express.Router();

// üìå R√©cup√©rer toutes les r√©servations avec les infos des voitures
router.get('/', async (req, res) => {
  try {
    const reservations = await Reservation.findAll({
      include: [{ model: Car }]
    });

    res.json(reservations);
  } catch (error) {
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des r√©servations' });
  }
});

// üìå Cr√©er une nouvelle r√©servation avec v√©rification des dates
router.post('/', async (req, res) => {
  const { user_name, car_id, start_date, end_date, total_price } = req.body;

  try {
    // üîç V√©rifie s'il existe d√©j√† une r√©servation chevauchante pour cette voiture
    const existingReservation = await Reservation.findOne({
      where: {
        car_id,
        [Op.or]: [
          {
            start_date: { [Op.between]: [start_date, end_date] }
          },
          {
            end_date: { [Op.between]: [start_date, end_date] }
          },
          {
            start_date: { [Op.lte]: start_date },
            end_date: { [Op.gte]: end_date }
          }
        ]
      }
    });

    if (existingReservation) {
      return res.status(400).json({ error: 'Cette voiture est d√©j√† r√©serv√©e √† ces dates.' });
    }

    // ‚úÖ Cr√©e la r√©servation si aucune collision
    const reservation = await Reservation.create({
      user_name,
      car_id,
      start_date,
      end_date,
      total_price
    });

    res.status(201).json(reservation);
  } catch (error) {
    console.error('Erreur cr√©ation r√©servation :', error);
    res.status(500).json({ error: 'Erreur lors de la cr√©ation de la r√©servation' });
  }
});

// üìå R√©cup√©rer les r√©servations d'un utilisateur
router.get('/user/:username', async (req, res) => {
  const { username } = req.params;

  try {
    const reservations = await Reservation.findAll({
      where: { user_name: username },
      include: [{ model: Car }]
    });

    res.json(reservations);
  } catch (error) {
    console.error('Erreur r√©cup√©ration r√©servations utilisateur:', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

module.exports = router;
