const express = require('express');
const bcrypt = require('bcrypt');
const User = require('../models/User');

const router = express.Router();

// üìå R√©cup√©rer tous les utilisateurs
router.get('/', async (req, res) => {
  try {
    const users = await User.findAll();
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// üìå Inscription (ajout d‚Äôun utilisateur avec hashage du mot de passe)
router.post('/register', async (req, res) => {
  try {
    const { username, email, password } = req.body;

    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ error: 'Cet email est d√©j√† utilis√©' });
    }

    // Hasher le mot de passe avant d‚Äôenregistrer l‚Äôutilisateur
    const hashedPassword = await bcrypt.hash(password, 10);

    // Ajouter l‚Äôutilisateur dans la base de donn√©es
    const newUser = await User.create({
      username,
      email,
      password: hashedPassword,
    });

    res.status(201).json({ message: 'Utilisateur cr√©√© avec succ√®s', user: newUser });
  } catch (error) {
    console.error('‚ùå Erreur lors de l‚Äôinscription :', error);
    res.status(500).json({ error: 'Erreur interne du serveur' });
  }
});

// üìå Connexion (v√©rification de l‚Äôemail et du mot de passe)
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // V√©rifier si l‚Äôutilisateur existe
    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(400).json({ error: 'Utilisateur non trouv√©' });
    }

    // V√©rifier le mot de passe
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ error: 'Mot de passe incorrect' });
    }

    res.status(200).json({ message: 'Connexion r√©ussie', user });
  } catch (error) {
    console.error('‚ùå Erreur lors de la connexion :', error);
    res.status(500).json({ error: 'Erreur interne du serveur' });
  }
});

module.exports = router;
